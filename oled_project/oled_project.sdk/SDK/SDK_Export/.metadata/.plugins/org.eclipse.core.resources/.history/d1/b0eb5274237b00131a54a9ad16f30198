/*
 * Oled.cpp
 *
 *  Created on: Jan 10, 2014
 *      Author: DGronlund
 */

#include "Oled.h"

Oled::Oled() : data(64), gpio(new XGpio()) {

	/*
	 * Initialize the GPIO driver
	 */
	u32 status = XGpio_Initialize(gpio, 0);
	if (status != XST_SUCCESS) {
		print("Gpio Failure");
	}

	/*
	 * Set the direction of all port to be outputs
	 */
	XGpio_SetDataDirection(gpio, 1, 0);

	/*
	 * Initializes power for oled display
	 */
	print("Power Up Sequence Start\n");
	xil_printf("Hex: %x", oled_byte(0xF));
	vdd(true);
	oled_sleep(5);
	reset(false);
	oled_sleep(5);
	reset(true);
	oled_sleep(5);
	vbat(true);
	print("Power Up Sequence Done\n");

	/*
	 * Initializes the oled settings
	 */
	spi_write(0xAE, 0); // Display Off
	spi_write(0x8D, 0); // Pump 1
	spi_write(0x14, 0);
	spi_write(0xD9, 0); // Precharge
	spi_write(0xF1, 0);
	spi_write(0x81, 0); // Contrast
	spi_write(0xFF, 0);
	spi_write(0xA4, 0); // Display from RAM
	spi_write(0xAF, 0); // Display On
	oled_sleep(5);           // Wait for COM functions
	spi_write(0x20, 0); // Vertical Addressing
	spi_write(0x01, 0);
	oled_sleep(5);
}

Oled::~Oled() {
	// TODO Auto-generated destructor stub
}

void Oled::oled_sleep(u32 millis) {
	xil_printf("Delay: %d", millis * 1000);
	usleep(millis * 1000);
}

u8 Oled::oled_byte(u8 in) {
	return ((in & 8) << 3) | ((in & 4) << 2) | ((in & 2) << 1) | (in & 1);
}

void Oled::vdd(bool value) {
	if (value) {
		data &= ~0x01;
	} else {
		data |= 0x01;
	}
	XGpio_DiscreteWrite(gpio, 1, data);
}

void Oled::vbat(bool value) {
	if (value) {
		data &= ~0x02;
	} else {
		data |= 0x02;
	}
	XGpio_DiscreteWrite(gpio, 1, data);
}

void Oled::reset(bool value) {
	if (value) {
		data |= 0x04;
	} else {
		data &= ~0x04;
	}
	XGpio_DiscreteWrite(gpio, 1, data);
}

void Oled::sclk(bool value) {
	if (value) {
		data |= 0x08;
	} else {
		data &= ~0x08;
	}
	XGpio_DiscreteWrite(gpio, 1, data);
}

void Oled::sdata(bool value) {
	if (value) {
		data |= 0x10;
	} else {
		data &= ~0x10;
	}
	XGpio_DiscreteWrite(gpio, 1, data);
}

void Oled::scmd(bool value) {
	if (value) {
		data |= 0x20;
	} else {
		data &= ~0x20;
	}
	XGpio_DiscreteWrite(gpio, 1, data);
}

void Oled::spi_delay() {
	for (u32 i = 0; i < 0; i++) {
	}
}

void Oled::spi_write(u8 data, bool cmd) {
	scmd(cmd);
	sclk(false);
	for (u32 i = 7; i >= 0; i--) {
		sdata((data >> i) & 1);
		sclk(true);
		spi_delay();
		sclk(false);
	}
}

void Oled::write4Pixels(u8 data) {
	spi_write(oled_byte(data), 1);
}

void Oled::write8Pixels(u8 data) {
	write4Pixels(data);
	write4Pixels(data >> 4);
}

