/*
 * Empty C++ Application
 */

#include "xgpio.h"
#include "xil_printf.h"
#include "unistd.h"

#include "lwip/opt.h"
#include "lwip/stats.h"
#include "lwip/sys.h"
#include "lwip/pbuf.h"
#include "lwip/udp.h"
#include "lwip/tcp.h"
#include "lwip/dns.h"
#include "lwip/dhcp.h"
#include "lwip/init.h"
#include "lwip/netif.h"
#include "netif/etharp.h"

XGpio Gpio;

/*
 * Simple delay function
 */
void delay(int time) {
	for (int i = 0; i < time * 50000; i++) {
	}
}

int data = 64;

struct netif netif_data;

#define IFNAME0 'e'
#define IFNAME1 'n'

struct ethernetif {
  struct eth_addr *ethaddr;
  /* Add whatever per-interface state that is needed here. */
};

static void
low_level_init(struct netif *netif)
{
  //struct ethernetif *ethernetif = netif->state;

  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;

  /* set MAC hardware address */
  netif->hwaddr[0] = 1;
  netif->hwaddr[1] = 2;
  netif->hwaddr[2] = 3;
  netif->hwaddr[3] = 4;
  netif->hwaddr[4] = 5;
  netif->hwaddr[5] = 6;

  /* maximum transfer unit */
  netif->mtu = 1500;

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP;

  /* Do whatever else is needed to initialize interface. */
}

/**
 * This function should do the actual transmission of the packet. The packet is
 * contained in the pbuf that is passed to the function. This pbuf
 * might be chained.
 *
 * @param netif the lwip network interface structure for this ethernetif
 * @param p the MAC packet to send (e.g. IP packet including MAC addresses and type)
 * @return ERR_OK if the packet could be sent
 *         an err_t value if the packet couldn't be sent
 *
 * @note Returning ERR_MEM here if a DMA queue of your MAC is full can lead to
 *       strange results. You might consider waiting for space in the DMA queue
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t
low_level_output(struct netif *netif, struct pbuf *p)
{
  struct ethernetif *ethernetif = netif->state;
  struct pbuf *q;

  initiate transfer();

#if ETH_PAD_SIZE
  pbuf_header(p, -ETH_PAD_SIZE); /* drop the padding word */
#endif

  for(q = p; q != NULL; q = q->next) {
    /* Send the data from the pbuf to the interface, one pbuf at a
       time. The size of the data in each pbuf is kept in the ->len
       variable. */
    send data from(q->payload, q->len);
  }

  signal that packet should be sent();

#if ETH_PAD_SIZE
  pbuf_header(p, ETH_PAD_SIZE); /* reclaim the padding word */
#endif

  LINK_STATS_INC(link.xmit);

  return ERR_OK;
}

err_t
ethernetif_init(struct netif *netif)
{
  struct ethernetif *ethernetif;

  LWIP_ASSERT("netif != NULL", (netif != NULL));

  ethernetif = mem_malloc(sizeof(struct ethernetif));
  if (ethernetif == NULL) {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_init: out of memory\n"));
    return ERR_MEM;
  }

#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  /*
   * Initialize the snmp variables and counters inside the struct netif.
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->state = ethernetif;
  netif->name[0] = IFNAME0;
  netif->name[1] = IFNAME1;
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
  netif->linkoutput = low_level_output;

  ethernetif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}

u8 oled_byte(u8 in) {
	return ((in & 8) << 3) | ((in & 4) << 2) | ((in & 2) << 1) | (in & 1);
}

void vdd(bool value) {
	if (value) {
		data &= ~0x01;
	} else {
		data |= 0x01;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void vbat(bool value) {
	if (value) {
		data &= ~0x02;
	} else {
		data |= 0x02;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void reset(bool value) {
	if (value) {
		data |= 0x04;
	} else {
		data &= ~0x04;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void sclk(bool value) {
	if (value) {
		data |= 0x08;
	} else {
		data &= ~0x08;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void sdata(bool value) {
	if (value) {
		data |= 0x10;
	} else {
		data &= ~0x10;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void scmd(bool value) {
	if (value) {
		data |= 0x20;
	} else {
		data &= ~0x20;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void spi_delay() {
	for (int i = 0; i < 0; i++) {
	}
}

void spi_write(u8 data, bool cmd) {
	scmd(cmd);
	sclk(false);
	for (int i = 7; i >= 0; i--) {
		sdata((data >> i) & 1);
		sclk(true);
		spi_delay();
		sclk(false);
	}
}

err_t init_net(struct netif *netif) {
	return ERR_OK;
}

int main() {

	/*
	 * Initialize the GPIO driver
	 */
	int status = XGpio_Initialize(&Gpio, 0);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Set the direction of all port to be outputs
	 */
	XGpio_SetDataDirection(&Gpio, 1, 0);

	print("Power Up Sequence Start\n");
	xil_printf("Hex: %x", oled_byte(0xF));
	vdd(true);
	delay(5);
	reset(false);
	delay(5);
	reset(true);
	delay(5);
	vbat(true);
	print("Power Up Sequence Done\n");

	spi_write(0xAE, 0); // Display Off
	spi_write(0x8D, 0); // Pump 1
	spi_write(0x14, 0);
	spi_write(0xD9, 0); // Precharge
	spi_write(0xF1, 0);
	spi_write(0x81, 0); // Contrast
	spi_write(0xFF, 0);
	spi_write(0xA4, 0); // Display from RAM
	spi_write(0xAF, 0); // Display On

	delay(5);

	spi_write(0x20, 0); // Vertical Addressing
	spi_write(0x01, 0);

	spi_write(0xFF, 1);

	u8 temp = 0;
	struct netif *netif = &netif_data;
	struct ip_addr ipaddr;
	struct ip_addr netmask;
	struct ip_addr gateway;
	/* Start Network with DHCP */
	IP4_ADDR(&netmask, 255, 255, 255, 128);
	IP4_ADDR(&gateway, 172, 250, 250, 1);
	IP4_ADDR(&ipaddr, 172, 250, 250, 126);
	xil_printf("start\n");
	/* Initialise after configuration */
	lwip_init();
	netif->hwaddr_len = ETHARP_HWADDR_LEN;
	netif = netif_add(netif, &ipaddr, &netmask, &gateway, NULL, ethernetif_init, ip_input);
	xil_printf("lwip_init\n");
	netif_set_default(netif);
	xil_printf("init\n");
	//dhcp_start(netif); // <-- Use DHCP
	while (!netif_is_up(netif)) {
	}
	xil_printf("net up\n");
	//printf("Interface is up, local IP is %s\r\n",
	//		inet_ntoa(*(struct in_addr*) &(netif->ip_addr)));
	struct tcp_pcb *pcb = tcp_new();
	if (tcp_bind(pcb, IP_ADDR_ANY, 80) == ERR_OK) {
		char text[] = "test text!";
		tcp_write(pcb, text, sizeof(text), 0);
		xil_printf("sent\n");
	}
	while (1) {
		for (int i = 0; i < 64 * 16; i++) {
			spi_write(oled_byte(temp), 1);
		}
		//xil_printf("Hex: %x", oled_byte(temp));
		temp++;
		delay(1000);
	}

	isatty(0);

	return 0;
}

