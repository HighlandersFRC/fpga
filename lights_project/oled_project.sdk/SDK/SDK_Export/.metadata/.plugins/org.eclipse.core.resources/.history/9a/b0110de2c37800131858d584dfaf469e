/*
 * Empty C++ Application
 */

#include "xgpio.h"
#include "xil_printf.h"
#include "unistd.h"

#include "lwip/opt.h"
#include "lwip/stats.h"
#include "lwip/sys.h"
#include "lwip/pbuf.h"
#include "lwip/udp.h"
#include "lwip/tcp.h"
#include "lwip/dns.h"
#include "lwip/dhcp.h"
#include "lwip/init.h"
#include "lwip/netif.h"
#include "netif/etharp.h"
#include "netif/loopif.h"

XGpio Gpio;

/*
 * Simple delay function
 */
void delay(int time) {
	for (int i = 0; i < time * 50000; i++) {
	}
}

int data = 64;

u8 oled_byte(u8 in) {
	return ((in & 8) << 3) | ((in & 4) << 2) | ((in & 2) << 1) | (in & 1);
}

void vdd(bool value) {
	if (value) {
		data &= ~0x01;
	} else {
		data |= 0x01;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void vbat(bool value) {
	if (value) {
		data &= ~0x02;
	} else {
		data |= 0x02;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void reset(bool value) {
	if (value) {
		data |= 0x04;
	} else {
		data &= ~0x04;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void sclk(bool value) {
	if (value) {
		data |= 0x08;
	} else {
		data &= ~0x08;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void sdata(bool value) {
	if (value) {
		data |= 0x10;
	} else {
		data &= ~0x10;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void scmd(bool value) {
	if (value) {
		data |= 0x20;
	} else {
		data &= ~0x20;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void spi_delay() {
	for (int i = 0; i < 0; i++) {
	}
}

void spi_write(u8 data, bool cmd) {
	scmd(cmd);
	sclk(false);
	for (int i = 7; i >= 0; i--) {
		sdata((data >> i) & 1);
		sclk(true);
		spi_delay();
		sclk(false);
	}
}

int main() {

	/*
	 * Initialize the GPIO driver
	 */
	int status = XGpio_Initialize(&Gpio, 0);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Set the direction of all port to be outputs
	 */
	XGpio_SetDataDirection(&Gpio, 1, 0);

	print("Power Up Sequence Start\n");
	xil_printf("Hex: %x", oled_byte(0xF));
	vdd(true);
	delay(5);
	reset(false);
	delay(5);
	reset(true);
	delay(5);
	vbat(true);
	print("Power Up Sequence Done\n");

	spi_write(0xAE, 0); // Display Off
	spi_write(0x8D, 0); // Pump 1
	spi_write(0x14, 0);
	spi_write(0xD9, 0); // Precharge
	spi_write(0xF1, 0);
	spi_write(0x81, 0); // Contrast
	spi_write(0xFF, 0);
	spi_write(0xA4, 0); // Display from RAM
	spi_write(0xAF, 0); // Display On

	delay(5);

	spi_write(0x20, 0); // Vertical Addressing
	spi_write(0x01, 0);

	spi_write(0xFF, 1);

	u8 temp = 0;

	struct netconn *conn, *newconn;
	/* create a connection structure */
	conn = netconn_new(NETCONN_TCP);
	/* bind the connection to port 2000 on any local
	IP address */
	netconn_bind(conn, NULL, 2000);
	/* tell the connection to listen for incoming
	connection requests */
	//netconn_listen(conn);
	/* block until we get an incoming connection */
	//newconn = netconn_accept(conn);
	/* do something with the connection */
	//process_connection(newconn);
	/* deallocate both connections */
	//netconn_delete(newconn);
	/* the connection has now been closed by the
	other end, so we close our end */
	netconn_close(conn);
	char data[10];
	char text[] = "Static text";
	int i;
	/* set up the connection conn */
	/* [...] */
	/* create some arbitrary data */
	for(int i = 0; i < 10; i++)
		data[i] = i;
	netconn_write(conn, data, 10, NETCONN_COPY);
	netconn_write(conn, text, sizeof(text), NETCONN_NOCOPY);
	netconn_delete(conn);
	while (1) {
		for (int i = 0; i < 64 * 16; i++) {
			spi_write(oled_byte(temp), 1);
		}
		//xil_printf("Hex: %x", oled_byte(temp));
		temp++;
		delay(1000);
	}

	isatty(0);

	return 0;
}

