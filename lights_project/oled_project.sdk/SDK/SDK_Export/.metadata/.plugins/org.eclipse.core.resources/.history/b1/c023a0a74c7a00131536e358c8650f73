/*
 * Oled.cpp
 *
 *  Created on: Jan 10, 2014
 *      Author: DGronlund
 */

#include "Oled.h"

Oled::Oled() {


}

Oled::~Oled() {
	// TODO Auto-generated destructor stub
}

// Oled control data buffer
int data = 64;

u8 Oled::oled_byte(u8 in) {
	return ((in & 8) << 3) | ((in & 4) << 2) | ((in & 2) << 1) | (in & 1);
}

void Oled::vdd(bool value) {
	if (value) {
		data &= ~0x01;
	} else {
		data |= 0x01;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void Oled::vbat(bool value) {
	if (value) {
		data &= ~0x02;
	} else {
		data |= 0x02;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void Oled::reset(bool value) {
	if (value) {
		data |= 0x04;
	} else {
		data &= ~0x04;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void sclk(bool value) {
	if (value) {
		data |= 0x08;
	} else {
		data &= ~0x08;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void sdata(bool value) {
	if (value) {
		data |= 0x10;
	} else {
		data &= ~0x10;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void scmd(bool value) {
	if (value) {
		data |= 0x20;
	} else {
		data &= ~0x20;
	}
	XGpio_DiscreteWrite(&Gpio, 1, data);
}

void Oled::spi_delay() {
	for (int i = 0; i < 0; i++) {
	}
}

void Oled::spi_write(u8 data, bool cmd) {
	scmd(cmd);
	sclk(false);
	for (int i = 7; i >= 0; i--) {
		sdata((data >> i) & 1);
		sclk(true);
		spi_delay();
		sclk(false);
	}
}
